import integer.definition natural.addition tactic.nth_rewrite natural.equality

namespace Z

def sub_helper : N -> N -> Z
| 0 0                   := 0
| 0 (N.succ a)          := neg_succ a
| a 0                   := pos a
| (N.succ a) (N.succ b) := sub_helper a b

def add : Z -> Z -> Z
| (pos a) (pos b)           := pos (a + b)
| (pos a) (neg_succ b)      := sub_helper a (b + 1)
| (neg_succ a) (pos b)      := sub_helper b (a + 1)
| (neg_succ a) (neg_succ b) := neg_succ (a + b + 1)

def sub : Z -> Z -> Z
| (pos a) (pos b)           := sub_helper a b
| (pos a) (neg_succ b)      := pos (a + b + 1)
| (neg_succ a) (pos b)      := neg_succ (a + b)
| (neg_succ a) (neg_succ b) := sub_helper b a

def neg : Z -> Z
| (pos 0)          := pos 0
| (pos (N.succ a)) := neg_succ a
| (neg_succ a)     := pos (a + 1)

instance : has_add Z := ⟨ Z.add ⟩ 
instance : has_sub Z := ⟨ Z.sub ⟩ 
instance : has_neg Z := ⟨ Z.neg ⟩

def two := pos (N.succ 1)
theorem two_eq_two : two = 2 := rfl

lemma pos_add_pos (a b : N) : (pos a) + (pos b) = pos (a + b) := rfl
lemma pos_add_neg (a b : N) : (pos a) + (neg_succ b) = sub_helper a (b + 1) := rfl
lemma neg_add_pos (a b : N) : (neg_succ a) + (pos b) = sub_helper b (a + 1) := rfl
lemma neg_add_neg (a b : N) : (neg_succ a) + (neg_succ b) = neg_succ (a + b + 1) := rfl

lemma zero_sub_helper_zero : sub_helper 0 0 = 0 := rfl
lemma zero_sub_helper_succ (a : N) : sub_helper 0 (N.succ a) = neg_succ a := rfl
lemma succ_sub_helper_zero (a : N) : sub_helper (N.succ a) 0 = pos (N.succ a) := rfl
lemma succ_sub_helper_succ (a b : N) : sub_helper (N.succ a) (N.succ b) = sub_helper a b := rfl

lemma pos_sub_pos (a b : N) : (pos a) - (pos b) = sub_helper a b := rfl
lemma pos_sub_neg (a b : N) : (pos a) - (neg_succ b) = pos (a + b + 1) := rfl
lemma neg_sub_pos (a b : N) : (neg_succ a) - (pos b) = neg_succ (a + b) := rfl
lemma neg_sub_neg (a b : N) : (neg_succ a) - (neg_succ b) = sub_helper b a := rfl

lemma neg_zero : neg 0 = 0 := rfl
lemma neg_pos_succ (a : N) : neg (pos (N.succ a)) = neg_succ a := rfl
lemma neg_neg_succ (a : N) : neg (neg_succ a) = pos (a + 1) := rfl

lemma zero_sub (a : Z) : 0 - a = neg a :=
begin
  rw ← zero_eq_zero,
  cases a,
  rw pos_sub_pos,
  rw N.zero_eq_zero,
  cases a,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw ← N.zero_eq_zero,
  rw zero_eq_zero,
  rw neg_zero,
  rw zero_sub_helper_succ,
  rw neg_pos_succ,
  rw pos_sub_neg,
  rw neg_neg_succ,
  rw N.zero_eq_zero,
  rw N.zero_add,
end

lemma sub_helper_eq (a : N) : sub_helper a a = 0 := 
begin
  induction a,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw succ_sub_helper_succ,
  exact a_ih,
end

lemma sub_eq (a : Z) : a - a = 0 :=
begin
  cases a,
  rw pos_sub_pos,
  rw sub_helper_eq,
  rw neg_sub_neg,
  rw sub_helper_eq,
end

lemma sub_helper_zero (a : N) : sub_helper a 0 = pos a := 
begin
  cases a,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw ← zero_eq_zero,
  rw N.zero_eq_zero,
  rw succ_sub_helper_zero,
end

lemma zero_sub_helper_eq_r (a : N) : (sub_helper 0 a = 0) -> (a = 0) := 
begin
  intro h,
  cases a,
  rw N.zero_eq_zero,
  exfalso,
  rw zero_sub_helper_succ at h,
  cases h,
end

lemma zero_sub_helper_eq_l (a : N) : (sub_helper a 0 = 0) -> (a = 0) := 
begin
  intro h,
  cases a,
  rw N.zero_eq_zero,
  exfalso,
  rw succ_sub_helper_zero at h,
  cases h,
end

lemma zero_sub_helper_eq : ∀ a b : N, (sub_helper a b = 0) -> (a = b)
| 0 0 := 
begin
  intro h,
  refl,
end
| 0 (N.succ a) := 
begin
  intro h,
  exfalso,
  have s := zero_sub_helper_eq_r (N.succ a) h,
  cases h,
end
| (N.succ a) 0 := 
begin
  intro h,
  exfalso,
  have s := zero_sub_helper_eq_l (N.succ a) h,
  cases h,
end
| (N.succ a) (N.succ b) := 
begin
  intro h,
  rw succ_sub_helper_succ at h,
  have q := zero_sub_helper_eq a b h,
  exact (N.eq_succ a b q),
end

lemma pos_eq_pos (a b : N) : (pos a = pos b) -> a = b :=
begin
  intro h,
  have s := sub_eq (pos a),
  nth_rewrite 1 h at s,
  rw pos_sub_pos at s,
  exact (zero_sub_helper_eq a b s),
end

lemma neg_eq_neg (a b : N) : (neg_succ a = neg_succ b) -> (a = b) :=
begin
  intro h,
  have s := sub_eq (neg_succ a),
  nth_rewrite 1 h at s,
  rw neg_sub_neg at s,
  have t := zero_sub_helper_eq b a s,
  rw t,
end

lemma neg_succ_sub (a b : N) : (neg_succ a) - (pos b) = neg_succ (a + b) :=
begin
  rw neg_sub_pos,
end

lemma neg_succ_eq_neg_succ (a : N) : neg_succ a = neg (pos a)-1 := 
begin
  cases a,
  rw zero_eq_zero,
  rw neg_zero,
  rw zero_sub,
  rw ← one_eq_one,
  rw one,
  rw neg_pos_succ,
  rw N.zero_eq_zero,
  rw neg_pos_succ,
  rw ← one_eq_one,
  rw one,
  rw neg_succ_sub,
  rw N.add_succ,
  rw N.add_zero,
end

lemma zero_add (a : Z) : 0 + a = a :=
begin
  rw ← zero_eq_zero,
  cases a,
  rw pos_add_pos,
  rw N.zero_eq_zero,
  rw N.zero_add,
  rw pos_add_neg,
  rw ← N.one_eq_one,
  rw N.one,
  rw N.add_succ,
  rw N.add_zero,
  rw N.zero_eq_zero,
  rw zero_sub_helper_succ,
end

lemma add_zero (a : Z) : a + 0 = a :=
begin
  rw ← zero_eq_zero,
  cases a,
  rw pos_add_pos,
  rw N.zero_eq_zero,
  rw N.add_zero,
  rw neg_add_pos,
  rw ← N.one_eq_one, rw N.one,
  rw N.add_succ,
  rw N.add_zero,
  rw N.zero_eq_zero,
  rw zero_sub_helper_succ,
end

lemma sub_zero (a : Z) : a - 0 = a :=
begin
  rw ← zero_eq_zero,
  cases a,
  rw pos_sub_pos,
  rw N.zero_eq_zero,
  rw sub_helper_zero,
  rw neg_sub_pos,
  rw N.zero_eq_zero,
  rw N.add_zero,
end

theorem sub_eq_neg_add (a b : Z) : a - b = a + (neg b) := 
begin
  cases b,
  cases b,
  rw zero_eq_zero,
  rw neg_zero,
  rw add_zero,
  rw sub_zero,
  rw neg_pos_succ,
  cases a,
  rw pos_sub_pos,
  rw pos_add_neg,
  rw N.succ_eq_inc,
  rw neg_sub_pos,
  rw neg_add_neg,
  rw N.succ_eq_inc,
  rw N.add_assoc,
  rw neg_neg_succ,
  cases a,
  rw pos_sub_neg,
  rw pos_add_pos,
  rw N.add_assoc,
  rw neg_sub_neg,
  rw neg_add_pos,
  repeat {rw ← N.succ_eq_inc},
  rw succ_sub_helper_succ,
end

def neg_succ_Z (a : Z) := -a-1

lemma neg_succ_Z_eq_neg_succ (a : Z) : neg_succ_Z a = (neg a) - 1 := rfl

theorem double_neg_succ_is_eq (a : Z) : neg_succ_Z (neg_succ_Z a) = a :=
begin
  rw neg_succ_Z_eq_neg_succ,
  rw neg_succ_Z_eq_neg_succ,
  cases a,
  cases a,
  rw zero_eq_zero,
  rw neg_zero,
  rw zero_sub,
  rw ← one_eq_one,
  rw one,
  rw neg_pos_succ,
  rw neg_neg_succ,
  rw N.zero_add,
  rw ← N.one_eq_one,
  rw N.one,
  rw sub_eq,
  rw neg_pos_succ,
  rw ← one_eq_one,
  rw one,
  rw neg_succ_sub,
  rw neg_neg_succ,
  rw pos_sub_pos,
  rw N.add_succ,
  rw N.succ_add,
  rw succ_sub_helper_succ,
  rw N.add_zero,
  rw ← N.one_eq_one,
  rw N.one,
  rw N.add_succ,
  rw succ_sub_helper_zero,
  rw N.add_zero,
  rw neg_neg_succ,
  rw ← one_eq_one,
  rw one,
  rw pos_sub_pos,
  rw ← N.one_eq_one,
  rw N.one,
  rw N.add_succ,
  rw succ_sub_helper_succ,
  rw N.add_zero,
  cases a,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw neg_zero,
  rw zero_sub,
  rw neg_pos_succ,
  rw succ_sub_helper_zero,
  rw neg_pos_succ,
  rw neg_sub_pos,
  rw N.add_succ,
  rw N.add_zero,
end

lemma succ_eq_inc (a : N) : pos (N.succ a) = pos a + 1 := begin
  rw ← one_eq_one,
  rw one,
  rw pos_add_pos,
  rw N.add_succ,
  rw N.add_zero,
end

lemma succ_eq_inc_l (a : N) : pos (N.succ a) = 1 + pos a :=
begin
  rw ← one_eq_one,
  rw one,
  rw pos_add_pos,
  rw N.succ_add,
  rw N.zero_add,
end

lemma left_add_one_eq (a b : Z) : (1 + a = 1 + b) -> (a = b) :=
begin
  intro h,
  cases a,
  cases b,
  rw ← one_eq_one at h,
  rw one at h,
  repeat {rw pos_add_pos at h},
  have q := pos_eq_pos (N.succ 0 + a) (N.succ 0 + b) h,
  have t := N.add_eq a b (N.succ 0) q,
  exact (eq_pos_eq a b t),
  rw ← one_eq_one at h, rw one at h,
  rw pos_add_pos at h,
  rw N.succ_add at h,
  rw N.zero_add at h,
  rw pos_add_neg at h,
  rw ← N.one_eq_one at h, rw N.one at h,
  rw N.add_succ at h,
  rw N.add_zero at h,
  rw succ_sub_helper_succ at h,
  cases b,
  rw N.zero_eq_zero at h,
  rw zero_sub_helper_zero at h,
  rw ← zero_eq_zero at h,
  have q := pos_eq_pos (N.succ a) (N.zero) h,
  exfalso,
  rw N.zero_eq_zero at q,
  have t := N.eq_comm (N.succ a) 0 q,
  exact (N.zero_neq_succ a t),
  rw zero_sub_helper_succ at h,
  exfalso,
  exact (pos_neq_neg (N.succ a) b h),
  cases b,
  rw ← one_eq_one at h, rw one at h,
  rw pos_add_pos at h,
  rw N.succ_add at h,
  rw N.zero_add at h,
  rw pos_add_neg at h,
  rw ← N.one_eq_one at h, rw N.one at h,
  rw N.add_succ at h,
  rw N.add_zero at h,
  rw succ_sub_helper_succ at h,
  cases a,
  rw N.zero_eq_zero at h,
  rw zero_sub_helper_zero at h,
  rw ← zero_eq_zero at h,
  rw N.zero_eq_zero at h,
  have q := pos_eq_pos 0 (N.succ b) h,
  exfalso,
  exact (N.zero_neq_succ b q),
  rw zero_sub_helper_succ at h,
  exfalso,
  exact (neg_neq_pos a (N.succ b) h),
  rw ← one_eq_one at h, rw one at h,
  repeat {rw pos_add_neg at h},
  rw ← N.one_eq_one at h, rw N.one at h,
  repeat {rw N.add_succ at h,rw N.add_zero at h},
  repeat {rw succ_sub_helper_succ at h},
  cases a,
  rw N.zero_eq_zero at h,
  rw zero_sub_helper_zero at h,
  cases b,
  refl,
  rw zero_sub_helper_succ at h,
  exfalso,
  exact (pos_neq_neg 0 b h),
  rw zero_sub_helper_succ at h,
  cases b,
  rw N.zero_eq_zero at h,
  rw zero_sub_helper_zero at h,
  exfalso,
  exact (neg_neq_pos a 0 h),
  rw zero_sub_helper_succ at h,
  have t := neg_eq_neg a b h,
  exact (eq_neg_eq (N.succ a) (N.succ b) (N.eq_succ a b t)),
end

lemma one_add_comm (a : Z) : 1 + a = a + 1 :=
begin
  rw ← one_eq_one, rw one,
  cases a,
  repeat {rw pos_add_pos},
  rw N.succ_add,
  rw N.zero_add,
  rw N.add_succ,
  rw N.add_zero,
  rw pos_add_neg,
  rw neg_add_pos,
end

lemma one_sub_comm (a : Z) : neg 1 + a = a - 1 :=
begin
  rw ← one_eq_one, rw one,
  rw neg_pos_succ,
  cases a,
  rw neg_add_pos,
  rw pos_sub_pos,
  rw N.succ_eq_inc,
  rw neg_add_neg,
  rw neg_sub_pos,
  rw ← N.one, rw N.one_eq_one,
  rw N.zero_add,
end

lemma right_add_one_eq (a b : Z) : (a + 1 = b + 1) -> (a = b) :=
begin
  intro h,
  repeat {rw ← one_add_comm at h},
  exact (left_add_one_eq a b h),
end

lemma add_one_assoc (a b : Z) : (a + 1) + b = a + (1 + b) :=
begin
  cases a,
  cases b,
  rw ← one_eq_one, rw one,
  repeat {rw pos_add_pos},
  rw N.add_assoc,
  rw ← one_eq_one, rw one,
  rw pos_add_pos,
  rw pos_add_neg,
  rw pos_add_neg,
  rw ← N.one_eq_one, rw N.one,
  repeat {rw N.add_succ, rw N.add_zero},
  repeat {rw succ_sub_helper_succ},
  cases b,
  cases a,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw ← zero_eq_zero,
  rw pos_add_pos,
  rw N.zero_add,
  rw N.zero_eq_zero,
  rw succ_sub_helper_zero,
  rw zero_sub_helper_zero,
  rw add_zero,
  cases a,
  rw N.zero_eq_zero,
  rw zero_sub_helper_succ,
  rw pos_add_neg,
  have t := zero_sub (pos (b + 1)),
  rw ← zero_eq_zero at t,
  rw pos_sub_pos at t,
  rw N.zero_eq_zero at t,
  rw t,
  rw ← N.one_eq_one, rw N.one,
  rw N.add_succ,
  rw N.add_zero,
  rw neg_pos_succ,
  rw zero_sub_helper_succ,
  rw pos_add_neg,
  rw ← N.succ_eq_inc,
  cases b,
  rw ← one_eq_one, rw one,
  rw pos_add_pos,
  repeat {rw neg_add_pos},
  rw ← N.succ_eq_inc,
  rw succ_sub_helper_succ,
  rw N.succ_add,
  rw N.zero_add,
  rw succ_sub_helper_succ,
  cases a,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw sub_helper_zero,
  rw zero_add,
  rw zero_sub_helper_succ,
  rw neg_add_pos,
  rw N.succ_eq_inc,
  rw ← one_eq_one, rw one,
  rw neg_add_pos,
  rw ← N.succ_eq_inc,
  rw succ_sub_helper_succ,
  rw pos_add_neg,
  rw ← N.succ_eq_inc,
  rw succ_sub_helper_succ,
  cases a,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw zero_add,
  cases b,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw add_zero,
  rw zero_sub_helper_succ,
  rw neg_add_neg,
  rw N.zero_add,
  rw ← N.succ_eq_inc,
  rw zero_sub_helper_succ,
  rw neg_add_neg,
  cases b,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw add_zero,
  rw N.add_zero,
  rw ← N.succ_eq_inc,
  rw zero_sub_helper_succ,
  rw neg_add_neg,
  repeat {rw N.succ_eq_inc},
  rw N.add_comm b 1,
  repeat {rw N.add_assoc},
end

lemma fir_arg_sub_helper_inc : ∀ (a b : N), sub_helper (a + 1) b = (sub_helper a b) + 1
| 0 0 :=
begin
  rw ← N.succ_eq_inc,
  rw succ_sub_helper_zero,
  rw zero_sub_helper_zero,
  rw ← zero_eq_zero,
  rw ← one_eq_one, rw one,
  rw pos_add_pos,
  rw N.zero_eq_zero,
  rw N.zero_add,
end
| 0 (N.succ b) :=
begin
  rw ← N.succ_eq_inc,
  rw succ_sub_helper_succ,
  cases b,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw zero_sub_helper_succ,
  rw ← one_eq_one, rw one,
  rw neg_add_pos,
  rw ← N.succ_eq_inc,
  rw succ_sub_helper_succ,
  rw zero_sub_helper_zero,
  repeat {rw zero_sub_helper_succ},
  rw ← one_eq_one, rw one,
  rw neg_add_pos,
  rw ← N.succ_eq_inc,
  rw succ_sub_helper_succ,
  rw zero_sub_helper_succ,
end
| (N.succ a) 0 :=
begin
  repeat {rw sub_helper_zero},
  rw ← one_eq_one, rw one,
  rw pos_add_pos,
  rw ← N.one_eq_one, rw N.one,
end
| (N.succ a) (N.succ b) :=
begin
  rw ← N.succ_eq_inc,
  repeat {rw succ_sub_helper_succ},
  exact (fir_arg_sub_helper_inc a b),
end

lemma sec_arg_sub_helper_inc : ∀ (a b : N), sub_helper a (b + 1) = (sub_helper a b) - 1
| 0 0 := 
begin
  rw ← N.succ_eq_inc,
  rw zero_sub_helper_succ,
  rw zero_sub_helper_zero,
  rw ← zero_eq_zero,
  rw ← one_eq_one, rw one,
  rw pos_sub_pos,
  rw N.zero_eq_zero,
  rw zero_sub_helper_succ,
end
| 0 (N.succ b) :=
begin
  rw ← N.succ_eq_inc,
  repeat {rw zero_sub_helper_succ},
  rw ← one_eq_one, rw one,
  rw neg_sub_pos,
  rw N.add_succ,
  rw N.add_zero,
end
| (N.succ a) 0 := 
begin
  rw ← N.succ_eq_inc, 
  rw succ_sub_helper_succ,
  rw succ_sub_helper_zero,
  rw sub_helper_zero,
  rw ← one_eq_one, rw one,
  rw pos_sub_pos,
  rw succ_sub_helper_succ,
  rw sub_helper_zero,
end
| (N.succ a) (N.succ b) :=
begin
  rw ← N.succ_eq_inc,
  rw succ_sub_helper_succ,
  rw succ_sub_helper_succ,
  exact (sec_arg_sub_helper_inc a b),
end

lemma infix_inc_eq (a b c d : Z) : (a + 1 + b = c + 1 + d) -> (a + b = c + d) :=
begin
  intro h,
  cases a,
  cases b,
  cases c,
  cases d,
  rw ← one_eq_one at h, rw one at h,
  repeat {rw pos_add_pos},
  repeat {rw pos_add_pos at h},
  have s := pos_eq_pos _ _ h,
  rw N.add_comm a _ at s,
  rw N.add_comm c _ at s,
  repeat {rw N.add_assoc at s},
  have t := N.add_eq _ _ _ s,
  rw t,
  rw ← one_eq_one at h, rw one at h,
  repeat {rw pos_add_pos at h},
  rw pos_add_neg at h,
  rw ← N.one at h, rw N.one_eq_one at h,
  repeat {rw ← N.succ_eq_inc at h},
  rw succ_sub_helper_succ at h,
  rw pos_add_neg,
  have s := sub_helper c d,
  rw sec_arg_sub_helper_inc,
  cases (sub_helper c d),
  rw ← h,
  rw ← one_eq_one, rw one,
  rw pos_sub_pos,
  rw N.succ_add,
  rw succ_sub_helper_succ,
  rw sub_helper_zero,
  rw ← h,
  rw ← one_eq_one, rw one,
  rw pos_sub_pos,
  rw N.succ_add,
  rw succ_sub_helper_succ,
  rw sub_helper_zero,
  cases d,
  repeat {rw add_one_assoc at h},
  rw ← one_eq_one at h, rw one at h,
  repeat {rw pos_add_pos at h},
  rw neg_add_pos at h,
  rw neg_add_pos,
  rw ← N.one at h, rw N.one_eq_one at h,
  rw N.add_comm 1 d at h,
  rw fir_arg_sub_helper_inc _ _ at h,
  rw N.add_comm 1 b at h,
  rw ← N.add_assoc at h,
  rw ← pos_add_pos at h,
  rw ← N.one_eq_one at h, rw N.one at h,
  rw ← one at h, rw one_eq_one at h,
  exact (right_add_one_eq _ _ h),
  rw ← one_eq_one at h, rw one at h,
  repeat {rw pos_add_pos at h},
  rw pos_add_neg at h,
  exfalso,
  rw ← N.succ_eq_inc at h,
  rw succ_sub_helper_succ at h,
  cases d,
  rw N.zero_eq_zero at h,
  rw zero_sub_helper_zero at h,
  rw add_zero at h,
  cases h,
  rw zero_sub_helper_succ at h,
  rw neg_add_neg at h,
  cases h,
  rw ← one_eq_one at h, rw one at h,
  rw pos_add_neg at h,
  rw ← N.succ_eq_inc at h,
  rw succ_sub_helper_succ at h,
  cases d,
  rw pos_add_pos at h,
  cases c,
  rw pos_add_pos,
  rw pos_add_pos at h,
  cases b,
  rw N.zero_eq_zero at h,
  rw zero_sub_helper_zero at h,
  rw add_zero at h,
  rw h,
  rw pos_add_neg,
  rw ← N.succ_eq_inc,
  rw N.succ_add,
  rw N.add_succ,
  rw succ_sub_helper_succ,
  rw N.zero_eq_zero,
  rw sub_helper_zero,
  rw N.zero_add,
  rw zero_sub_helper_succ at h,
  rw pos_add_neg,
  rw sec_arg_sub_helper_inc,
  rw pos_add_neg at h,
  rw N.succ_eq_inc,
  rw h,
  rw ← one_eq_one, rw one,
  rw pos_sub_pos,
  rw N.succ_add,
  rw N.add_succ,
  rw succ_sub_helper_succ,
  rw sub_helper_zero,
  rw N.zero_add,
  cases b,
  rw N.zero_eq_zero at h,
  rw zero_sub_helper_zero at h,
  rw add_zero at h,
  rw h,
  rw neg_add_pos,
  rw N.succ_add,
  rw N.zero_add,
  rw neg_add_pos,
  rw N.succ_eq_inc,
  rw fir_arg_sub_helper_inc,
  rw add_one_assoc,
  rw ← one_eq_one, rw one,
  rw pos_add_neg,
  rw ← N.succ_eq_inc N.zero,
  rw succ_sub_helper_succ,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw add_zero,
  rw zero_sub_helper_succ at h,
  rw pos_add_neg,
  rw sec_arg_sub_helper_inc,
  rw N.succ_eq_inc,
  rw ← pos_add_neg,
  rw h,
  rw N.add_comm,
  rw neg_add_pos,
  rw ← N.one, rw N.one_eq_one,
  rw fir_arg_sub_helper_inc,
  rw sub_eq_neg_add,
  rw add_one_assoc,
  rw ← sub_eq_neg_add,
  rw sub_eq,
  rw add_zero,rw neg_add_pos,
  cases b,
  rw N.zero_eq_zero at h,
  rw zero_sub_helper_zero at h,
  rw add_zero at h,
  rw h,
  rw pos_add_neg,
  rw ← N.succ_eq_inc,
  rw succ_sub_helper_succ,
  cases d,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw add_zero,
  rw zero_sub_helper_succ,
  cases c,
  repeat {rw pos_add_neg},
  nth_rewrite 1 sec_arg_sub_helper_inc,
  rw N.succ_eq_inc,
  rw sub_eq_neg_add,
  rw ← one_eq_one, rw one,
  rw neg_pos_succ,
  rw N.zero_eq_zero,
  repeat {rw neg_add_neg},
  rw N.succ_eq_inc,
  rw N.zero_eq_zero,
  rw N.add_zero,
  repeat {rw N.add_assoc},
  rw zero_sub_helper_succ at h,
  rw pos_add_neg at h,
  rw sec_arg_sub_helper_inc,
  rw N.succ_eq_inc,
  rw h,
  rw pos_add_neg,
  rw ← N.succ_eq_inc,
  rw succ_sub_helper_succ,
  cases d,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw add_zero,
  rw sub_eq_neg_add,
  rw ← one_eq_one, rw one,
  rw neg_pos_succ,
  rw zero_sub_helper_succ,
  cases c,
  repeat {rw pos_add_neg},
  nth_rewrite 1 sec_arg_sub_helper_inc,
  rw N.succ_eq_inc,
  repeat {rw neg_add_neg},
  rw ← one_eq_one, rw one,
  rw neg_sub_pos,
  rw N.succ_eq_inc d,
  repeat {rw N.add_assoc},
  rw ← N.one, rw N.one_eq_one,
  cases b,
  rw ← one_eq_one at h, rw one at h,
  rw pos_add_pos at h,
  rw neg_add_pos at h,
  rw ← N.succ_eq_inc at h,
  rw N.succ_add at h,
  rw N.zero_add at h,
  rw succ_sub_helper_succ at h,
  rw neg_add_pos,
  rw sec_arg_sub_helper_inc,
  rw h,
  cases d,
  rw pos_add_pos,
  cases c,
  rw pos_add_pos,
  rw ← one_eq_one, rw one,
  rw pos_sub_pos,
  rw N.succ_add,
  rw N.zero_add,
  rw N.add_succ,
  rw succ_sub_helper_succ,
  rw sub_helper_zero,
  rw pos_add_pos,
  rw neg_add_pos,
  rw ← sec_arg_sub_helper_inc,
  rw ← N.one_eq_one, rw N.one,
  rw N.succ_add,
  rw N.zero_add,
  repeat {rw N.add_succ, rw N.add_zero},
  rw succ_sub_helper_succ,
  rw neg_add_pos,
  rw N.succ_eq_inc,
  rw pos_add_neg,
  rw ← N.succ_eq_inc,
  rw succ_sub_helper_succ,
  cases d,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw add_zero,
  rw ← one_eq_one, rw one,
  rw sub_eq_neg_add,
  rw neg_pos_succ,
  rw zero_sub_helper_succ,
  cases c,
  rw pos_add_neg,
  rw ← sec_arg_sub_helper_inc,
  rw ← pos_add_neg,
  rw N.succ_eq_inc,
  repeat {rw neg_add_neg},
  rw ← one_eq_one, rw one,
  rw neg_sub_pos,
  rw ← N.one, rw N.one_eq_one,
  rw N.succ_eq_inc,
  repeat {rw N.add_assoc},
  rw ← one_eq_one at h, rw one at h,
  rw pos_add_neg at h,
  rw ← N.succ_eq_inc at h,
  rw succ_sub_helper_succ at h,
  cases b,
  rw N.zero_eq_zero at h,
  rw zero_sub_helper_zero at h,
  rw add_zero at h,
  rw N.zero_eq_zero,
  rw ← N.add_assoc,
  rw ← neg_add_neg,
  rw h,
  cases d,
  rw pos_add_pos,
  cases c,
  rw pos_add_pos,
  rw pos_add_neg,
  rw ← N.succ_eq_inc,
  rw N.succ_add,
  rw N.zero_add,
  rw N.add_succ,
  rw succ_sub_helper_succ,
  rw sub_helper_zero,
  rw pos_add_pos,
  rw neg_add_pos,
  rw ← neg_pos_succ,
  rw ← sub_eq_neg_add,
  rw ← one, rw one_eq_one,
  rw ← sec_arg_sub_helper_inc,
  nth_rewrite 0 ← N.one_eq_one, rw N.one,
  rw N.add_succ,
  repeat {rw N.succ_add},
  rw succ_sub_helper_succ,
  rw N.add_zero,
  rw neg_add_pos,
  rw N.zero_add,
  rw pos_add_neg,
  rw ← N.succ_eq_inc,
  rw succ_sub_helper_succ,
  cases d,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw add_zero,
  rw zero_sub_helper_succ,
  cases c,
  rw pos_add_neg,
  rw ← neg_pos_succ,
  rw ← sub_eq_neg_add,
  rw ← one, rw one_eq_one,
  rw ← sec_arg_sub_helper_inc,
  rw ← pos_add_neg,
  rw N.succ_eq_inc,
  repeat {rw neg_add_neg},
  rw N.add_zero,
  rw N.succ_eq_inc,
  repeat {rw N.add_assoc},
  rw zero_sub_helper_succ at h,
  rw neg_add_neg at h,
  rw N.succ_eq_inc,
  rw ← N.add_assoc,
  nth_rewrite 1 ← N.one_eq_one, rw N.one,
  rw N.succ_eq_inc,
  repeat {rw ← N.add_assoc},
  rw ← neg_add_neg,
  rw h,
  cases d,
  rw pos_add_pos,
  rw N.succ_add,
  rw N.zero_add,
  cases c,
  repeat {rw pos_add_pos},
  rw pos_add_neg,
  rw ← N.succ_eq_inc,
  rw N.add_succ,
  rw succ_sub_helper_succ,
  rw sub_helper_zero,
  rw neg_add_pos,
  rw ← neg_pos_succ,
  rw ← sub_eq_neg_add,
  rw ← one, rw one_eq_one,
  rw ← N.succ_eq_inc,
  rw ← sec_arg_sub_helper_inc,
  rw N.succ_add,
  rw succ_sub_helper_succ,
  rw ← neg_add_pos,
  rw pos_add_neg,
  rw ← N.succ_eq_inc,
  rw succ_sub_helper_succ,
  cases d,
  rw N.zero_eq_zero,
  rw zero_sub_helper_zero,
  rw add_zero,
  rw zero_sub_helper_succ,
  cases c,
  rw pos_add_neg,
  rw ← N.one_eq_one, rw N.one,
  rw ← neg_pos_succ,
  rw ← sub_eq_neg_add,
  rw ← one, rw one_eq_one,
  rw ← sec_arg_sub_helper_inc,
  rw ← pos_add_neg,
  rw N.add_succ,
  rw N.add_zero,
  repeat {rw neg_add_neg},
  rw N.add_zero,
  rw N.succ_eq_inc,
  repeat {rw N.add_assoc},
end

lemma neg_eq (a b : Z) : (a = b) -> (neg a = neg b) :=
begin
  intro h,
  rw h,
end

lemma neg_sub_helper : ∀ (a b : N), neg (sub_helper a b) = sub_helper b a
| 0 0 :=
begin
  rw zero_sub_helper_zero,
  rw neg_zero,
end
| 0 (N.succ b) :=
begin
  rw succ_sub_helper_zero,
  rw zero_sub_helper_succ,
  rw neg_neg_succ,
  rw N.succ_eq_inc,
end
| (N.succ a) 0 :=
begin
  rw succ_sub_helper_zero,
  rw zero_sub_helper_succ,
  rw neg_pos_succ,
end
| (N.succ a) (N.succ b) :=
begin
  repeat {rw succ_sub_helper_succ},
  exact (neg_sub_helper a b),
end

lemma neg_add (a b : Z) : neg (a + b) = neg a + neg b :=
begin
  cases a,
  cases a,
  rw zero_eq_zero,
  rw neg_zero,
  repeat {rw zero_add},
  rw neg_pos_succ,
  cases b,
  cases b,
  rw zero_eq_zero,
  rw neg_zero,
  repeat {rw add_zero},
  rw neg_pos_succ,
  rw pos_add_pos,
  rw N.add_succ,
  rw neg_pos_succ,
  rw neg_pos_succ,
  rw neg_add_neg,
  rw N.succ_add,
  rw ← N.succ_eq_inc,
  rw neg_neg_succ,
  rw pos_add_neg,
  rw neg_sub_helper,
  rw neg_add_pos,
  rw N.succ_eq_inc,
  rw neg_neg_succ,
  cases b,
  rw neg_add_pos,
  rw neg_sub_helper,
  cases b,
  rw N.zero_eq_zero,
  rw ← N.zero_eq_zero,
  rw zero_eq_zero,
  rw neg_zero,
  rw add_zero,
  rw N.zero_eq_zero,
  rw sub_helper_zero,
  rw neg_pos_succ,
  rw pos_add_neg,
  rw N.succ_eq_inc,
  rw neg_add_neg,
  repeat {rw neg_neg_succ},
  rw pos_add_pos,
  rw ← N.add_assoc,
  rw N.add_assoc a 1 b,
  rw N.add_comm 1 b,
  rw ← N.add_assoc,
end

lemma neg_Z_eq_neg_Z (a b : Z) : (neg a = neg b) -> (a = b) :=
begin
  intro h,
  cases a,
  cases a,
  rw zero_eq_zero at h,
  rw neg_zero at h,
  rw zero_eq_zero,
  cases b,
  cases b,
  rw zero_eq_zero,
  exfalso,
  rw neg_pos_succ at h,
  cases h,
  exfalso,
  rw neg_neg_succ at h,
  rw ← zero_eq_zero at h,
  have t := pos_eq_pos _ _ h,
  exact N.zero_neq_succ _ t,
  rw neg_pos_succ at h,
  cases b,
  cases b,
  exfalso,
  rw zero_eq_zero at h,
  rw neg_zero at h,
  cases h,
  rw neg_pos_succ at h,
  have t := neg_eq_neg _ _ h,
  rw t,
  rw neg_neg_succ at h,
  exfalso,
  cases h,
  rw neg_neg_succ at h,
  cases b,
  cases b,
  rw zero_eq_zero at h,
  rw neg_zero at h,
  exfalso,
  rw ← N.succ_eq_inc at h,
  rw ← zero_eq_zero at h,
  have t := pos_eq_pos _ _ h,
  exact (N.succ_neq_zero _ t),
  rw neg_pos_succ at h,
  exfalso,
  cases h,
  rw neg_neg_succ at h,
  have t := pos_eq_pos _ _ h,
  repeat {rw ← N.succ_eq_inc at t},
  have q := N.succ_eq _ _ t,
  rw q,
end

lemma add_eq_pos (a b: Z) (d: N): ((pos d) + a = (pos d) + b) -> (a = b) :=
begin
  intro h,
  induction d,
  rw zero_eq_zero at h,
  rw zero_add at h,
  rw zero_add at h,
  exact h,
  rw succ_eq_inc at h,
  have t := infix_inc_eq _ _ _ _ h,
  exact (d_ih t),
end

lemma add_eq_neg (a b: Z) (d: N): ((neg_succ d) + a = (neg_succ d) + b) -> (a = b) :=
begin
  intro h,
  have t := neg_eq _ _ h,
  repeat {rw neg_add at t},
  repeat {rw neg_neg_succ at t},
  have q := add_eq_pos _ _ _ t,
  exact (neg_Z_eq_neg_Z _ _ q),
end

theorem add_eq (a b d : Z): (d + a = d + b) -> (a = b) :=
begin
  intro h,
  cases d,
  exact add_eq_pos _ _ _ h,
  exact add_eq_neg _ _ _ h,
end

lemma sub_helper_add_pos (a b c : N) : sub_helper a b + pos c = sub_helper (a + c) b :=
begin
  induction c,
  rw zero_eq_zero,
  rw add_zero,
  rw N.zero_eq_zero,
  rw N.add_zero,
  rw N.succ_eq_inc,
  rw ← N.add_assoc,
  rw fir_arg_sub_helper_inc,
  rw ← c_ih,
  cases sub_helper a b,
  rw ← one_eq_one, rw one,
  repeat {rw pos_add_pos},
  rw ← N.one, rw N.one_eq_one,
  rw N.add_assoc,
  repeat {rw neg_add_pos},
  rw ← fir_arg_sub_helper_inc,
end

lemma pos_add_sub_helper (a b c : N) : pos a + sub_helper b c = sub_helper (a + b) c :=
begin
  induction a,
  rw zero_eq_zero,
  rw zero_add,
  rw N.zero_eq_zero,
  rw N.zero_add,
  rw N.succ_add,
  rw N.succ_eq_inc (a_n + b),
  rw fir_arg_sub_helper_inc,
  rw ← a_ih,
  cases sub_helper b c,
  rw ← one_eq_one, rw one,
  repeat {rw pos_add_pos},
  rw N.succ_add,
  rw N.add_succ,
  rw N.add_zero,
  repeat {rw pos_add_neg},
  rw ← fir_arg_sub_helper_inc,
  rw N.succ_eq_inc,
end

lemma sub_helper_add_neg (a b c : N) : sub_helper a b + neg_succ c = sub_helper a (b + c + 1) :=
begin
  induction c,
  rw N.zero_eq_zero,
  rw N.add_zero,
  rw ← neg_pos_succ,
  rw ← sub_eq_neg_add,
  rw ← one, rw one_eq_one,
  rw sec_arg_sub_helper_inc,
  rw N.add_succ,
  rw N.succ_add,
  rw N.succ_eq_inc (b + c_n + 1),
  rw sec_arg_sub_helper_inc,
  rw ← c_ih,
  cases sub_helper a b,
  repeat {rw pos_add_neg},
  rw ← sec_arg_sub_helper_inc,
  rw N.succ_eq_inc,
  rw sub_eq_neg_add,
  rw ← one_eq_one, rw one,
  rw neg_pos_succ,
  repeat {rw neg_add_neg},
  rw N.succ_eq_inc,
  rw N.add_zero,
  repeat {rw N.add_assoc},
end

lemma neg_add_sub_helper (a b c : N) : neg_succ a + sub_helper b c = sub_helper b (a + c + 1) :=
begin
  induction a,
  rw N.zero_eq_zero,
  rw N.zero_add,
  rw ← neg_pos_succ,
  rw ← one, rw one_eq_one,
  rw one_sub_comm,
  rw sec_arg_sub_helper_inc,
  repeat {rw N.succ_add},
  rw N.succ_eq_inc (a_n + c + 1),
  rw sec_arg_sub_helper_inc,
  rw ← a_ih,
  cases sub_helper b c,
  repeat {rw neg_add_pos},
  rw ← sec_arg_sub_helper_inc,
  rw N.succ_eq_inc,
  repeat {rw neg_add_neg},
  rw ← one_eq_one, rw one,
  rw neg_sub_pos,
  repeat {rw N.succ_add},
  rw N.add_succ,
  rw N.add_zero,
end

theorem add_assoc (a b c : Z) : a + b + c = a + (b + c) :=
begin
  cases a,
  induction a,
  rw zero_eq_zero,
  rw zero_add,
  rw zero_add,
  cases b,
  rw pos_add_pos,
  rw pos_add_pos at a_ih,
  cases c,
  repeat {rw pos_add_pos},
  repeat {rw N.add_assoc},
  repeat {rw pos_add_neg},
  repeat {rw pos_add_neg at a_ih},
  rw N.succ_add,
  rw N.succ_eq_inc,
  rw fir_arg_sub_helper_inc,
  rw a_ih,
  cases sub_helper b (c + 1),
  rw ← one_eq_one, rw one,
  repeat {rw pos_add_pos},
  rw N.succ_add,
  rw N.add_succ,
  rw N.add_zero,
  repeat {rw pos_add_neg},
  rw ← fir_arg_sub_helper_inc,
  rw N.succ_eq_inc,
  cases c,
  rw sub_helper_add_pos,
  rw neg_add_pos,
  rw pos_add_sub_helper,
  rw neg_add_neg,
  rw pos_add_neg,
  rw sub_helper_add_neg,
  rw N.add_assoc b 1 c,
  rw N.add_comm 1 c,
  rw ← N.add_assoc,
  cases b,
  rw neg_add_pos,
  cases c,
  rw pos_add_pos,
  rw neg_add_pos,
  rw sub_helper_add_pos,
  rw sub_helper_add_neg,
  rw pos_add_neg,
  rw neg_add_sub_helper,
  rw N.add_comm c 1,
  repeat {rw N.add_assoc},
  rw neg_add_neg,
  cases c,
  repeat {rw neg_add_pos},
  rw neg_add_sub_helper,
  repeat {rw N.add_assoc},
  repeat {rw neg_add_neg},
  rw ← N.one_eq_one, rw N.one,
  repeat {rw N.add_succ},
  repeat {rw N.add_zero},
  rw N.succ_add,
  rw N.add_assoc,
end

theorem add_comm (a b : Z): a + b = b + a :=
begin
  cases a,
  cases b,
  repeat {rw pos_add_pos},
  rw N.add_comm,
  rw pos_add_neg,
  rw neg_add_pos,
  cases b,
  rw neg_add_pos,
  rw pos_add_neg,
  repeat {rw neg_add_neg},
  rw N.add_comm a b,
end

end Z